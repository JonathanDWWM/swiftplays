import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function delete1v1Teams() {
  try {
    console.log('üîç Recherche des √©quipes 1v1...');
    
    // R√©cup√©rer toutes les √©quipes 1v1
    const teamsToDelete = await prisma.team.findMany({
      where: {
        gameMode: '1v1'
      },
      include: {
        owner: {
          select: {
            pseudo: true
          }
        },
        members: {
          include: {
            user: {
              select: {
                pseudo: true
              }
            }
          }
        }
      }
    });

    console.log(`üìä ${teamsToDelete.length} √©quipe(s) 1v1 trouv√©e(s)`);

    if (teamsToDelete.length === 0) {
      console.log('‚úÖ Aucune √©quipe 1v1 √† supprimer');
      return;
    }

    // Afficher les √©quipes qui vont √™tre supprim√©es
    console.log('\nüìã √âquipes qui vont √™tre supprim√©es :');
    teamsToDelete.forEach(team => {
      console.log(`- ${team.name} (${team.game} ${team.gameMode}) - Propri√©taire: ${team.owner.pseudo}`);
    });

    console.log('\nüóëÔ∏è Suppression des √©quipes 1v1...');

    // Supprimer toutes les √©quipes 1v1 (les membres seront supprim√©s automatiquement gr√¢ce √† onDelete: Cascade)
    const deleteResult = await prisma.team.deleteMany({
      where: {
        gameMode: '1v1'
      }
    });

    console.log(`‚úÖ ${deleteResult.count} √©quipe(s) 1v1 supprim√©e(s) avec succ√®s !`);
    console.log('‚ÑπÔ∏è Les comp√©titions individuelles 1v1 seront maintenant g√©r√©es par le syst√®me Ladder');

  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression des √©quipes 1v1:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le script
delete1v1Teams();