generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String?  // Optionnel pour les comptes Discord
  pseudo      String   @unique
  firstName   String?
  lastName    String?
  avatar      String?  // URL vers l'image de profil
  isVerified  Boolean  @default(false)
  role        Role     @default(USER)

  // Discord OAuth
  discordId       String? @unique // ID Discord de l'utilisateur
  discordUsername String? // Nom d'utilisateur Discord
  discordAvatar   String? // URL de l'avatar Discord
  
  // Type de compte
  accountType     AccountType @default(EMAIL)

  // Relations équipes
  ownedTeams      Team[]       @relation("TeamOwner")
  
  // Relations messages
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  
  // Relations notifications (à supprimer après migration)
  notifications   Notification[]

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("users")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum AccountType {
  EMAIL    // Compte créé avec email/password
  DISCORD  // Compte créé via Discord OAuth
  HYBRID   // Compte email lié à Discord
}

model Team {
  id          String   @id @default(cuid())
  name        String   @unique // Nom unique de l'équipe
  shortName   String   @unique // Nom court (3 caractères)
  description String?  // Description optionnelle
  avatar      String?  // URL de l'avatar de l'équipe
  game        Game     // Jeu de l'équipe
  gameMode    String   // Mode de jeu selon le jeu
  maxMembers  Int      // Limite de membres selon le jeu/mode
  
  // Relations
  ownerId     String
  owner       User     @relation("TeamOwner", fields: [ownerId], references: [id])
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("teams")
}

enum Game {
  FC_26               // FIFA 26 - 1v1, 2v2, 5v5
  CALL_OF_DUTY_BO7    // Call of Duty Black Ops 7 - 1v1, 2v2, 4v4
}



model Notification {
  id       String           @id @default(cuid())
  type     NotificationType
  title    String           // Titre de la notification
  message  String           // Message de la notification
  data     Json?            // Données JSON additionnelles (ex: ID équipe, etc.)
  isRead   Boolean          @default(false)
  
  // Relations
  userId   String
  user     User @relation(fields: [userId], references: [id])
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("notifications")
  @@index([userId, isRead])
  @@index([userId, createdAt])
}

enum NotificationType {
  SYSTEM                // Notification système générale
}

model Message {
  id          String        @id @default(cuid())
  type        MessageType   
  category    MessageCategory @default(NOTIFICATION)
  title       String        
  content     String        
  isRead      Boolean       @default(false)
  
  // Actions intégrées (JSON)
  actions     Json?         // Boutons dynamiques : accepter/refuser/voir/etc.
  data        Json?         // Données contextuelles (teamId, invitationId, etc.)
  
  // Relations
  senderId    String?       // Optionnel pour messages système
  receiverId  String
  sender      User?         @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User          @relation("ReceivedMessages", fields: [receiverId], references: [id])
  
  // Métadonnées
  priority    Priority      @default(NORMAL)
  expiresAt   DateTime?     // Pour invitations avec timeout
  
  // Timestamps
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@map("messages")
  @@index([receiverId, isRead])
  @@index([receiverId, createdAt])
  @@index([receiverId, category])
}

enum MessageType {
  // Système
  SYSTEM_WELCOME
  SYSTEM_UPDATE
  SYSTEM_MAINTENANCE
  
  // Futur : Compétition
  MATCH_CHALLENGE
  MATCH_RESULT
  TOURNAMENT_INVITE
  
  // Futur : Social
  PRIVATE_MESSAGE
  LOBBY_INVITE
}

enum MessageCategory {
  NOTIFICATION    // Notifications classiques
  INVITATION     // Nécessitent une action
  SYSTEM         // Messages système
  PRIVATE        // Messages privés (futur)
  LOBBY          // Invitations lobby (futur)
}

enum Priority {
  LOW
  NORMAL  
  HIGH
  URGENT
}

